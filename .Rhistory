![Me]("/Users/sriyapothula/Desktop/stat/mywebsite/IMG_7712.JPG")
![Me](/Users/sriyapothula/Desktop/stat/mywebsite/IMG_7712.JPG)
![Me](/Users/sriyapothula/Desktop/stat/mywebsite/IMG_7712.JPG)
(/Users/sriyapothula/Desktop/stat/mywebsite/IMG_7712.JPG)
![Me](/Users/sriyapothula/Desktop/stat/mywebsite/IMG_7712.JPG)
![Me](/Users/sriyapothula/Desktop/stat/mywebsite/IMG_7712.JPG)
![Me](.../Users/sriyapothula/Desktop/stat/mywebsite/IMG_7712.JPG)
library(jpeg)
library(jpg)
install.packages("jpeg")
library(jpeg)
library(jpeg)
img <- readJPEG("/Users/sriyapothula/Desktop/stat/mywebsite/IMG_7712.JPG")
plot(1:2, type='n', xlab='', ylab='', main='My Image')
rasterImage(img, 1, 1, 2, 2)
library(jpeg)
img <- readJPEG("/Users/sriyapothula/Desktop/stat/mywebsite/IMG_7712.JPG")
plot(1:2, type='n', xlab='', ylab='', main='My Image')
rasterImage(img, 2, 2, 1, 1)
library(jpeg)
img <- readJPEG("/Users/sriyapothula/Desktop/stat/mywebsite/IMG_7712.JPG")
plot(1:2, type='n', xlab='', ylab='', main='My Image')
rasterImage(img, 2, 2, 1, 1)
library(jpeg)
img <- readJPEG("/Users/sriyapothula/Desktop/stat/mywebsite/IMG_7712.JPG")
library(jpeg)
img <- readJPEG("/Users/sriyapothula/Desktop/stat/mywebsite/IMG_7712.JPG")
---
About:
id: me
setwd("~/Desktop/stat/mywebsite")
about:
template: jolla
sum(is.na(abalone))
abalone = read.csv("/Users/sriyapothula/Desktop/stat/Abalone/abalone.csv")
sum(is.na(abalone))
sum(complete.cases(abalone))
ggpairs(abalone, aes(colour = Sex, alpha = 0.8), title="Pairs plot for abalone dataset") +
theme_grey(base_size = 8)
library(GGally)
install.packages("GGally")
library(GGally)
ggpairs(abalone, aes(colour = Sex, alpha = 0.8), title="Pairs plot for abalone dataset") +
theme_grey(base_size = 8)
install.packages("GGally")
library(GGally)
ggpairs(abalone, aes(colour = Sex, alpha = 0.8), title="Pairs plot for abalone dataset") +
theme_grey(base_size = 8)
library(GGally)
ggpairs(abalone, aes(colour = Sex, alpha = 0.8), title="Pairs plot for abalone dataset") +
theme_grey(base_size = 8)
library(GGally)
library(ggplot2)
ggpairs(abalone, aes(colour = Sex, alpha = 0.8), title="Pairs plot for abalone dataset") +
theme_grey(base_size = 8)
library(GGally)
library(ggplot2)
ggpairs(abalone, aes(colour = Sex, alpha = 0.8), title="Pairs plot for abalone dataset") +
theme_grey(base_size = 8)
library(tidyverse)
library(GGally)
library(ggplot2)
ggpairs(abalone, aes(colour = Sex, alpha = 0.8), title="Pairs plot for abalone dataset") +
theme_grey(base_size = 8)
library(tidyverse)
library(GGally)
library(ggplot2)
library(dplyr)
ggpairs(abalone, aes(colour = Sex, alpha = 0.8), title="Pairs plot for abalone dataset") +
theme_grey(base_size = 8)
library(tidyverse)
library(GGally)
library(ggplot2)
library(dplyr)
library(pairs)
library(tidyverse)
library(GGally)
library(ggplot2)
library(dplyr)
library(pairs)
library(tidyverse)
library(GGally)
library(ggplot2)
library(dplyr)
ggpairs(abalone, aes(colour = Sex, alpha = 0.8), title="Pairs plot for abalone dataset") +
theme_grey(base_size = 8)
library(readr)
library(dplyr)
library(car)
library(lmtest)
library(ggplot2)
library(GGally)
library(gridExtra)
library(MASS)
library(leaps)
library(glmnet)
library(caret)
library(gbm)
install.packages("readr")
install.packages("dplyr")
install.packages("car")
install.packages("lmtest")
install.packages("ggplot2")
install.packages("GGally")
install.packages("gridExtra")
install.packages("MASS")
install.packages("leaps")
install.packages("glmnet")
install.packages("caret")
install.packages("gbm")
library(readr)
library(dplyr)
library(car)
library(lmtest)
library(ggplot2)
library(GGally)
library(gridExtra)
library(MASS)
library(leaps)
library(glmnet)
library(caret)
library(gbm)
ggpairs(abalone, aes(colour = Sex, alpha = 0.8), title="Pairs plot for abalone dataset") +
theme_grey(base_size = 8)
install.packages("dplyr")
library(tidyverse)
library(tidyverse)
library(randomForest)
library(caret)
library(corrplot)
# Histogram of Rings
ggplot(abalone, aes(x = Rings)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Rings")
# Boxplot for Rings by Sex
ggplot(abalone, aes(x = Sex, y = Rings)) +
geom_boxplot(fill = "cyan", color = "black") +
labs(title = "Rings Distribution by Sex")
# Pair Plot to visualize relationships between variables
pairs(~Length + Diameter + Height + Whole_weight, data = abalone,
main = "Pairwise Relationships", pch = 20)
anova_result <- aov(Rings ~ Sex, data = abalone)
summary(anova_result)
abalone$Sex <- as.factor(abalone$Sex)
correlations <- cor(abalone[,-1])
correlations
# Train a Random Forest to get variable importance
set.seed(12)
model <- randomForest(Rings ~ ., data = abalone, importance = TRUE)
varImpPlot(model)
abalone_no_sex <- abalone[, !names(abalone) %in% c("Sex")]
index <- createDataPartition(abalone_no_sex$Rings, p = 0.8, list = TRUE)
train_data <- abalone_no_sex[index$Resample1,]
test_data <- abalone_no_sex[-index$Resample1,]
train_control <- trainControl(
method = "cv",  # using cross-validation
number = 10     # number of folds in cross-validation
)
models <- list()
models$rf <- train(Rings ~ ., data = abalone_no_sex, method = "rf", trControl = train_control)
# SVM
models$svm <- train(Rings ~ ., data = abalone_no_sex, method = "svmRadial", trControl = train_control, preProcess = "scale")
# GBM
models$gbm <- train(Rings ~ ., data = abalone_no_sex, method = "gbm", trControl = train_control, verbose = FALSE)
# Linear Regression
models$lm <- train(Rings ~ ., data = abalone_no_sex, method = "lm", trControl = train_control)
predictions_rf <- predict(models$rf, test_data)
predictions_svm <- predict(models$svm, test_data)
predictions_gbm <- predict(models$gbm, test_data)
predictions_lm <- predict(models$lm, test_data)
rmse_rf <- RMSE(predictions_rf, test_data$Rings)
r2_rf <- R2(predictions_rf, test_data$Rings)
rmse_svm <- RMSE(predictions_svm, test_data$Rings)
r2_svm <- R2(predictions_svm, test_data$Rings)
rmse_gbm <- RMSE(predictions_gbm, test_data$Rings)
r2_gbm <- R2(predictions_gbm, test_data$Rings)
rmse_lm <- RMSE(predictions_lm, test_data$Rings)
r2_lm <- R2(predictions_lm, test_data$Rings)
cat("RF RMSE:", rmse_rf, "R2:", r2_rf, "\n")
cat("SVM RMSE:", rmse_svm, "R2:", r2_svm, "\n")
cat("GBM RMSE:", rmse_gbm, "R2:", r2_gbm, "\n")
cat("LM RMSE:", rmse_lm, "R2:", r2_lm, "\n")
# Set up training control
train_control <- trainControl(method = "cv", number = 10, search = "grid")
tune_grid <- expand.grid(
mtry = seq(2, ncol(abalone_no_sex) - 1, by = 1), # adjust the range for mtry based on the reduced number of features
splitrule = c("variance"),
min.node.size = c(5, 10)
)
set.seed(12)
tuned_model <- train(Rings ~ ., data = abalone_no_sex, method = "ranger",
trControl = train_control, tuneGrid = tune_grid,
metric = "RMSE")
library(caret)
install.packages("FactoMineR")
library(FactoMineR)
# Assuming abalone_no_sex is your dataset
data <- abalone_no_sex  # make sure this dataset does not include the response variable 'Rings'
# Scale the data
data_scaled <- scale(data)
pca_result <- PCA(data_scaled, graph = FALSE)
plot(pca_result, choice = "eigen")
num_components <- which(cumsum(pca_result$eig[,2]) > 85)[1]
data_pca <- pca_result$ind$coord[, 1:num_components]
num_components <- which(cumsum(pca_result$eig[,2]) > 85)[1]
data_pca <- pca_result$ind$coord[, 1:num_components]
# Prepare the final dataset for modeling
final_data <- data.frame(Rings = abalone_no_sex$Rings, data_pca)
# Splitting the data into training and testing sets
set.seed(12)
index <- createDataPartition(final_data$Rings, p = 0.8, list = TRUE)
train_data <- final_data[index$Resample1,]
test_data <- final_data[-index$Resample1,]
# Train models using the PCA-transformed data
train_control <- trainControl(method = "cv", number = 10)
models <- list()
models$rf <- train(Rings ~ ., data = train_data, method = "rf", trControl = train_control)
models$svm <- train(Rings ~ ., data = train_data, method = "svmRadial", trControl = train_control)
models$gbm <- train(Rings ~ ., data = abalone_no_sex, method = "gbm", trControl = train_control, verbose = FALSE)
# Linear Regression
models$lm <- train(Rings ~ ., data = abalone_no_sex, method = "lm", trControl = train_control)
predictions_rf <- predict(models$rf, test_data)
predictions_svm <- predict(models$svm, test_data)
predictions_gbm <- predict(models$gbm, test_data)
